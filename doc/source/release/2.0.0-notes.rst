=========================
NumPy 2.0.0 Release Notes
=========================


NumPy 2.0 Python API removals
=============================

* Alias ``np.float_`` has been removed. Use ``np.float64`` instead.

* Alias ``np.complex_`` has been removed. Use ``np.complex128`` instead.

* Alias ``np.longfloat`` has been removed. Use ``np.longdouble`` instead.

* Alias ``np.singlecomplex`` has been removed. Use ``np.complex64`` instead.

* Alias ``np.cfloat`` has been removed. Use ``np.complex128`` instead.

* Alias ``np.longcomplex`` has been removed. Use ``np.clongdouble`` instead.

* Alias ``np.clongfloat`` has been removed. Use ``np.clongdouble`` instead.

* Alias ``np.string_`` has been removed. Use ``np.bytes_`` instead.

* Alias ``np.unicode_`` has been removed. Use ``np.str_`` instead.

* Alias ``np.Inf`` has been removed. Use ``np.inf`` instead.

* Alias ``np.Infinity`` has been removed. Use ``np.inf`` instead.

* Alias ``np.NaN`` has been removed. Use ``np.nan`` instead.

* Alias ``np.infty`` has been removed. Use ``np.inf`` instead.

* Alias ``np.mat`` has been removed. Use ``np.asmatrix`` instead.

* ``np.issubclass_`` has been removed. Use ``issubclass`` builtin instead.

* ``np.asfarray`` has been removed. Use ``np.asarray`` with a proper dtype instead.

* ``np.set_string_function`` has been removed. Use ``np.set_printoptions``
  instead with a formatter for custom printing of NumPy objects.

* ``np.tracemalloc_domain`` is now only available from ``np.lib``.

* ``np.recfromcsv`` and ``recfromtxt`` are now only available from ``np.lib.npyio``.

* ``np.issctype``, ``np.maximum_sctype``, ``np.obj2sctype``, ``np.sctype2char``,
  ``np.sctypes``, ``np.issubsctype`` were all removed from the
  main namespace without replacement, as they where niche members.

* Deprecated ``np.deprecate`` and ``np.deprecate_with_doc`` has been removed 
  from the main namespace. Use ``DeprecationWarning`` instead.

* Deprecated ``np.safe_eval`` has been removed from the main namespace. 
  Use ``ast.literal_eval`` instead.

  (`gh-24376 <https://github.com/numpy/numpy/pull/24376>`__)

* ``np.find_common_type`` has been removed. Use ``numpy.promote_types`` or
  ``numpy.result_type`` instead. To achieve semantics for the ``scalar_types``
  argument, use ``numpy.result_type`` and pass the Pythonvalues ``0``, ``0.0``, or ``0j``.

* ``np.round_`` has been removed. Use ``np.round`` instead.

* ``np.nbytes`` has been removed. Use ``np.dtype(<dtype>).itemsize`` instead.

  (`gh-24477 <https://github.com/numpy/numpy/pull/24477>`__)

* ``np.compare_chararrays`` has been removed from the main namespace. 
  Use ``np.char.compare_chararrays`` instead.

* The ``charrarray`` in the main namespace has been deprecated. It can be imported
  without a deprecation warning from ``np.char.chararray`` for now,
  but we are planning to fully deprecate and remove ``chararray`` in the future.

* ``np.format_parser`` has been removed from the main namespace. 
  Use ``np.rec.format_parser`` instead.

  (`gh-24587 <https://github.com/numpy/numpy/pull/24587>`__)

Seven data type aliases have been removed from ``np.dtype(alias)`` search:
``int0``, ``uint0``, ``void0``, ``object0``, ``str0``, ``bytes0`` and ``bool8``.

(`gh-24807 <https://github.com/numpy/numpy/pull/24807>`__)

``__array_prepare__`` is removed
--------------------------------
UFuncs called ``__array_prepare__`` before running computations
for normal ufunc calls (not generalized ufuncs, reductions, etc.).
The function was also called instead of ``__array_wrap__`` on the
results of some linear algebra functions.

It is now removed, if you use it (e.g. old unit implementations)
migrate to ``__array_ufunc__`` or rely on ``__array_wrap__``
which is called with a context in all cases, although after the
result array is filled.
In those paths, ``__array_wrap__`` will now be passed a base
class, rather than a subclass array.

(`gh-25105 <https://github.com/numpy/numpy/pull/25105>`__)


Deprecations
============

* ``np.trapz`` has been deprecated. Use ``np.trapezoid`` or a ``scipy.integrate`` function instead.

* ``np.in1d`` has been deprecated. Use ``np.isin`` instead.

* Alias ``np.row_stack`` has been deprecated. Use ``np.vstack`` directly.

  (`gh-24445 <https://github.com/numpy/numpy/pull/24445>`__)

* ``__array_wrap__`` is now passed ``arr, context, return_scalar`` and
  implementations not accepting all three are deprecated.  It's signature
  should be ``__array_wrap__(self, arr, context=None, return_scalar=False)``

  (`gh-25408 <https://github.com/numpy/numpy/pull/25408>`__)

Arrays of 2-dimensional vectors for ``np.cross`` have been deprecated.
Use arrays of 3-dimensional vectors instead.

(`gh-24818 <https://github.com/numpy/numpy/pull/24818>`__)

``np.dtype("a")`` alias for ``np.dtype(np.bytes_)`` was deprecated.
Use ``np.dtype("S")`` alias instead.

(`gh-24854 <https://github.com/numpy/numpy/pull/24854>`__)

Use of keyword arguments ``x`` and ``y`` with functions
`numpy.testing.assert_array_equal` and
`numpy.testing.assert_array_almost_equal`
has been deprecated. Pass the first two arguments as positional arguments,
instead.

(`gh-24978 <https://github.com/numpy/numpy/pull/24978>`__)

`numpy.fft` deprecations for n-D transforms with ``None`` values in arguments
-----------------------------------------------------------------------------

Using `numpy.fft.fftn`, `numpy.fft.ifftn`, `numpy.fft.rfftn`,
`numpy.fft.irfftn`, `numpy.fft.fft2`, `numpy.fft.ifft2`, `numpy.fft.rfft2` or
`numpy.fft.irfft2` with the ``s`` parameter set to a value that is not
``None`` and the ``axes`` parameter set to ``None`` has been deprecated, in
line with the array API standard. To retain current behaviour, pass a sequence
[0, ..., k-1] to ``axes`` for an array of dimension k.

Furthermore, passing an array to ``s`` which contains ``None`` values is
deprecated as the parameter is documented to accept a sequence of integers
in both the NumPy docs and the array API specification. To use the default
behaviour of the corresponding 1-D transform, pass the value matching
the default for its ``n`` parameter. To use the default behaviour for every
axis, the ``s`` argument can be omitted.

(`gh-25495 <https://github.com/numpy/numpy/pull/25495>`__)

``np.linalg.lstsq`` now defaults to new ``rcond`` value
-------------------------------------------------------
`~numpy.linalg.lstsq` now uses the new rcond value of the machine precision
times ``max(M, N)``.  Previously, the machine precision was used but a
FutureWarning was given to notify that this change will happen eventually.
That old behavior can still be achieved by passing ``rcond=-1``.

(`gh-25721 <https://github.com/numpy/numpy/pull/25721>`__)


Expired deprecations
====================

* ``np.dtype(("f8", 1)`` will now return a shape 1 subarray dtype
  rather than a non-subarray one.

  (`gh-25761 <https://github.com/numpy/numpy/pull/25761>`__)

* Assigning to the data attribute is disallowed and will raise

* ``np.binary_repr(a, width)`` will raise if width is too small

* Using ``NPY_CHAR`` in ``PyArray_DescrFromType()`` will raise, use
  ``NPY_STRING`` ``NPY_UNICODE``, or ``NPY_VSTRING`` instead.

  (`gh-25794 <https://github.com/numpy/numpy/pull/25794>`__)


Compatibility notes
===================

``loadtxt`` and ``genfromtxt`` default to ``encoding=None``
-----------------------------------------------------------
``loadtxt`` and ``genfromtxt`` now both default to ``encoding=None``
which may mainly modifies how ``converters`` work.
These will now be passed ``str`` rather than ``bytes``, pass the
encoding explicitly to always get the new or old behavior.
For ``genfromtxt`` the change also means that returned values will now be
unicode strings rather than bytes.

(`gh-25158 <https://github.com/numpy/numpy/pull/25158>`__)

``f2py`` will no longer accept ambiguous ``-m`` and ``.pyf`` CLI combinations.
When more than one ``.pyf`` file is passed, an error is raised. When both ``-m``
and a ``.pyf`` is passed, a warning is emitted and the ``-m`` provided name is
ignored.

(`gh-25181 <https://github.com/numpy/numpy/pull/25181>`__)

The ``f2py.compile()`` helper has been removed because it leaked memory, has
been marked as experimental for several years now, and was implemented as a thin
``subprocess.run`` wrapper. It is also one of the test bottlenecks. See
`gh-25122 <https://github.com/numpy/numpy/issues/25122>`_ for the full
rationale. It also used several ``np.distutils`` features which are too fragile
to be ported to work with ``meson``.

Users are urged to replace calls to ``f2py.compile`` with calls to
``subprocess.run("python", "-m", "numpy.f2py",...`` instead, and to use
environment variables to interact with ``meson``. `Native files
<https://mesonbuild.com/Machine-files.html>`_ are also an option.

(`gh-25193 <https://github.com/numpy/numpy/pull/25193>`__)

``arange``'s ``start`` argument is positional-only
--------------------------------------------------
The first argument of ``arange`` is now positional only. This way,
specifying a ``start`` argument as a keyword, e.g. ``arange(start=0, stop=4)``,
raises a TypeError. Other behaviors, are unchanged so ``arange(stop=4)``,
``arange(2, stop=4)`` and so on, are still valid and have the same meaning as
before.

(`gh-25336 <https://github.com/numpy/numpy/pull/25336>`__)

Make ``numpy.array_api`` more portable
--------------------------------------

``numpy.array_api`` no longer uses ``"cpu"`` as its "device", but rather a
separate ``CPU_DEVICE`` object (which is not accessible in the namespace).
This is because "cpu" is not part of the array API standard.

``numpy.array_api`` now uses separate wrapped objects for dtypes. Previously
it reused the ``numpy`` dtype objects. This makes it clear which behaviors on
dtypes are part of the array API standard (effectively, the standard only
requires ``==``  on dtype objects).

``numpy.array_api.nonzero`` now errors on zero-dimensional arrays, as required
by the array API standard.

(`gh-25370 <https://github.com/numpy/numpy/pull/25370>`__)


C API changes
=============

* A C API for working with `numpy.dtypes.StringDType` arrays has been
  exposed. This includes functions for acquiring and releasing mutexes locking
  access to the string data as well as packing and unpacking UTF-8 bytestreams
  from array entries.
* ``NPY_NTYPES`` has been renamed to ``NPY_NTYPES_LEGACY`` as it does not
  include new NumPy built-in DTypes. In particular the new string DType
  will likely not work correctly with code that handles legacy DTypes.

  (`gh-25347 <https://github.com/numpy/numpy/pull/25347>`__)

* The C-API now only exports the static inline function versions
  of the array accessors (previously this dependent on using "deprecated API").
  While we discourage it, you can still use the struct fields directly.

  (`gh-25789 <https://github.com/numpy/numpy/pull/25789>`__)

Larger ``NPY_MAXDIMS`` and ``NPY_MAXARGS``, ``NPY_RAVEL_AXIS`` introduced
-------------------------------------------------------------------------

``NPY_MAXDIMS`` is now 64, you may want to review its use.  This is usually
used in a stack allocation, where the increase should be safe.
However, we do encourage generally to remove any use of ``NPY_MAXDIMS`` and
``NPY_MAXARGS`` to eventually allow removing the constraint completely.
For the conversion helper and C-API functions mirrowing Python ones such as
``tale``, ``NPY_MAXDIMS`` was used to mean ``axis=None`` these must be
replaced with ``NPY_RAVEL_AXIS``. See also :ref:`migration_maxdims`.

(`gh-25149 <https://github.com/numpy/numpy/pull/25149>`__)

``NPY_MAXARGS`` not constant and ``PyArrayMultiIterObject`` size change
-----------------------------------------------------------------------
Since ``NPY_MAXARGS`` was increased, it is now a runtime constant and not
compiletime constant anymore.
We expect almost no users to notice this.  But if used for stack allocations
it now must be replaced with a custom constant using ``NPY_MAXARGS`` as an
additional runtime check.

The ``sizeof(PyArrayMultiIterObject)`` does now not include the full size
of the object.  We expect nobody to notice this change.  It was necessary
to avoid issues with Cython.

(`gh-25271 <https://github.com/numpy/numpy/pull/25271>`__)

Required changes for custom legacy user dtypes
----------------------------------------------
In order to improve our DTypes it is unfortunately necessary
to break with ABI, which requires some changes for dtypes registered
with `PyArray_RegisterDataType`.
Please see the documentation of `PyArray_RegisterDataType` for how
to adapt your code and achieve compatibility with both 1.x and 2.x.

(`gh-25792 <https://github.com/numpy/numpy/pull/25792>`__)


NumPy 2.0 C API removals
========================

* ``NPY_INTPLTR`` has been removed to avoid confusion (see ``intp``
  redefinition).

  (`gh-24888 <https://github.com/numpy/numpy/pull/24888>`__)

* The advanced indexing ``MapIter`` and related API has been removed.
  The (truly) public part of it was not well tested and had only one
  known user (Theano).  Making it private will simplify improvements
  to speed up ``ufunc.at`` and make advanced indexing more maintainable
  and was important for allowing 64 dimensional arrays.
  Please let us know if this API is important to you so we can find a
  solution together.

  (`gh-25138 <https://github.com/numpy/numpy/pull/25138>`__)

* ``NPY_MAX_ELSIZE`` macro has been removed as it only ever reflected
  builtin numeric types and served no internal purpose.

  (`gh-25149 <https://github.com/numpy/numpy/pull/25149>`__)

* ``PyArray_REFCNT`` and ``NPY_REFCOUNT`` are removed. Use ``Py_REFCNT`` instead.

  (`gh-25156 <https://github.com/numpy/numpy/pull/25156>`__)

* ``PyArrayFlags_Type`` and ``PyArray_NewFlagsObject`` as well as
  ``PyArrayFlagsObject`` are private now.
  There is no known use-case, use the Python API if needed.
* ``PyArray_MoveInto``, ``PyArray_CastTo``, ``PyArray_CastAnyTo`` are removed
  use ``PyArray_CopyInto`` and if absolutely needed ``PyArray_CopyAnyInto``
  (the latter does a flat copy).
* ``PyArray_FillObjectArray`` is removed, its only true use is for
  implementing ``np.empty``.  Create a new empty array or use
  ``PyArray_FillWithScalar()`` (decrefs existing objects).
* ``PyArray_CompareUCS4`` and ``PyArray_CompareString`` are removed.
  Use the standard C string comparison functions.
* ``PyArray_ISPYTHON`` is removed as it is misleading, has no known
  use-cases and easy to replace.
* ``PyArray_FieldNames`` is removed as it is unclear what it would
  be useful for.  It also has incorrect semantics in some possible
  use-cases.
* ``PyArray_TypestrConvert`` since it seems a misnomer and unlikely
  to be used by anyone.  If you know the size or are limited to
  few types, just use it explicitly, otherwise go via Python
  strings.

  (`gh-25292 <https://github.com/numpy/numpy/pull/25292>`__)

``PyArray_GetCastFunc`` was removed
-----------------------------------
Note that custom legacy user dtypes can still provide a castfunc
as their implementation, but any access to them is now removed.
The reason for this is that NumPy never used these internally
for many years.
If you use simple numeric types, please just use C casts directly.
In case you require an alternative, please let us know so we can
create new API such as ``PyArray_CastBuffer()`` which could
use old or new cast functions depending on the NumPy version.

(`gh-25161 <https://github.com/numpy/numpy/pull/25161>`__)


New Features
============

* Extend ``np.add`` to work with ``unicode`` and ``bytes`` dtypes.

  (`gh-24858 <https://github.com/numpy/numpy/pull/24858>`__)

`np.bitwise_count` to compute the number of 1-bits in an integer array
----------------------------------------------------------------------

This new function counts the number of 1-bits in a number.
`np.bitwise_count` works on all the numpy integer types and
integer-like objects.

.. code-block:: python

    >>> a = np.array([2**i - 1 for i in range(16)])
    >>> np.bitwise_count(a)
    array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15],
          dtype=uint8)

(`gh-19355 <https://github.com/numpy/numpy/pull/19355>`__)

Support for the updated Accelerate BLAS/LAPACK library, including ILP64 (64-bit
integer) support, in macOS 13.3 has been added. This brings arm64 support, and
significant performance improvements of up to 10x for commonly used linear
algebra operations. When Accelerate is selected at build time, the 13.3+
version will automatically be used if available.

(`gh-24053 <https://github.com/numpy/numpy/pull/24053>`__)

``weights`` option for `quantile` and `percentile`
----------------------------------------------------
The ``weights`` option is now available for `quantile`, `percentile`,
`nanquantile` and `nanpercentile`. Only ``method="inverted_cdf"`` supports
weights.

(`gh-24254 <https://github.com/numpy/numpy/pull/24254>`__)

Improved CPU optimization tracking
----------------------------------

Introduces a tracer mechanism that enables tracking of the enabled targets
for each optimized function in the NumPy library. With this enhancement,
it becomes possible to precisely monitor the enabled CPU dispatch
targets for the dispatched functions.

A new function named `opt_func_info` has been added to the new namespace `numpy.lib.introspect`,
offering this tracing capability. This function allows you to retrieve information
about the enabled targets based on function names and data type signatures.

(`gh-24420 <https://github.com/numpy/numpy/pull/24420>`__)

``meson`` backend for ``f2py``
------------------------------
``f2py`` in compile mode (i.e. ``f2py -c``) now accepts the ``--backend meson`` option. This is the default option
for Python ``3.12`` on-wards. Older versions will still default to ``--backend
distutils``.

To support this in realistic use-cases, in compile mode ``f2py`` takes a
``--dep`` flag one or many times which maps to ``dependency()`` calls in the
``meson`` backend, and does nothing in the ``distutils`` backend.


There are no changes for users of ``f2py`` only as a code generator, i.e. without ``-c``.

(`gh-24532 <https://github.com/numpy/numpy/pull/24532>`__)

``bind(c)`` support for ``f2py``
--------------------------------
Both functions and subroutines can be annotated with ``bind(c)``. ``f2py`` will
handle both the correct type mapping, and preserve the unique label for other
``C`` interfaces.

**Note:** ``bind(c, name = 'routine_name_other_than_fortran_routine')`` is not
 honored by the ``f2py`` bindings by design, since ``bind(c)`` with the ``name``
 is meant to guarantee only the same name in ``C`` and ``Fortran``, not in
 ``Python`` and ``Fortran``.

(`gh-24555 <https://github.com/numpy/numpy/pull/24555>`__)

``strict`` option for `testing.assert_allclose`
-----------------------------------------------
The ``strict`` option is now available for `testing.assert_allclose`.
Setting ``strict=True`` will disable the broadcasting behaviour for scalars
and ensure that input arrays have the same data type.

(`gh-24680 <https://github.com/numpy/numpy/pull/24680>`__)

``strict`` option for `testing.assert_equal`
--------------------------------------------
The ``strict`` option is now available for `testing.assert_equal`.
Setting ``strict=True`` will disable the broadcasting behaviour for scalars
and ensure that input arrays have the same data type.

(`gh-24770 <https://github.com/numpy/numpy/pull/24770>`__)

``strict`` option for `testing.assert_array_less`
-------------------------------------------------
The ``strict`` option is now available for `testing.assert_array_less`.
Setting ``strict=True`` will disable the broadcasting behaviour for scalars
and ensure that input arrays have the same data type.

(`gh-24775 <https://github.com/numpy/numpy/pull/24775>`__)

Add ``np.core.umath.find`` and ``np.core.umath.rfind`` UFuncs
-------------------------------------------------------------
Add two ``find`` and ``rfind`` UFuncs that operate on unicode or byte strings
and are used in ``np.char``. They operate similar to ``str.find`` and
``str.rfind``.

(`gh-24868 <https://github.com/numpy/numpy/pull/24868>`__)

``diagonal`` and ``trace`` for `numpy.linalg`
---------------------------------------------

`numpy.linalg.diagonal` and `numpy.linalg.trace` have been
added, which are Array API compatible variants of `numpy.diagonal`
and `numpy.trace`. They differ in the default axis selection
which define 2-D sub-arrays.

(`gh-24887 <https://github.com/numpy/numpy/pull/24887>`__)

`numpy.long` and `numpy.ulong`
------------------------------

`numpy.long` and `numpy.ulong` have been added as NumPy integers mapping
to C's ``long`` and ``unsigned long``. Prior to NumPy 1.24 `numpy.long`
was an alias to Python's ``int``.

(`gh-24922 <https://github.com/numpy/numpy/pull/24922>`__)

``svdvals`` for `numpy.linalg`
------------------------------

`numpy.linalg.svdvals` has been added. It computes singular values for
(stack of) matrices. Executing ``np.svdvals(x)`` is the same as calling
``np.svd(x, compute_uv=False, hermitian=False)``.
This function is compatible with Array API.

(`gh-24940 <https://github.com/numpy/numpy/pull/24940>`__)

`numpy.isdtype`
---------------

`numpy.isdtype` was added to provide a canonical way to classify NumPy's dtypes
in compliance with Array API and using names standardized there.

(`gh-25054 <https://github.com/numpy/numpy/pull/25054>`__)

`numpy.astype`
--------------

`numpy.astype` was added to provide an Array API compatible alternative to
`numpy.ndarray.astype` method.

(`gh-25079 <https://github.com/numpy/numpy/pull/25079>`__)

Array API compatible functions' aliases
---------------------------------------

13 aliases for existing functions were added to improve compatibility with the Array API standard:

* Trigonometry: ``acos``, ``acosh``, ``asin``, ``asinh``, ``atan``, ``atanh``, ``atan2``.

* Bitwise: ``bitwise_left_shift``, ``bitwise_invert``, ``bitwise_right_shift``.

* Misc: ``concat``, ``permute_dims``, ``pow``.

* linalg: ``tensordot``, ``matmul``.

(`gh-25086 <https://github.com/numpy/numpy/pull/25086>`__)

Array API set functions
-----------------------

`numpy.unique_all`, `numpy.unique_counts`, `numpy.unique_inverse`,
and `numpy.unique_values` functions have been added for Array API compatiblity.
They provide functionality of `numpy.unique` with different sets of flags.

(`gh-25088 <https://github.com/numpy/numpy/pull/25088>`__)

``outer`` for `numpy.linalg`
----------------------------

`numpy.linalg.outer` has been added. It computes the outer product of two vectors.
It differs from `numpy.outer` by accepting one-dimensional arrays only.
This function is compatible with Array API.

(`gh-25101 <https://github.com/numpy/numpy/pull/25101>`__)

``cross`` for `numpy.linalg`
----------------------------

`numpy.linalg.cross` has been added. It computes the cross product of two
(arrays of) 3-dimensional vectors. It differs from `numpy.cross` by accepting
three-dimensional vectors only. This function is compatible with Array API.

(`gh-25145 <https://github.com/numpy/numpy/pull/25145>`__)

Array API compatible functions for ``numpy.linalg``
---------------------------------------------------

Four new functions and two aliases were added to improve compatibility with
the Array API standard for `numpy.linalg`:

* `numpy.linalg.matrix_norm` - Computes the matrix norm of a matrix (or a stack of matrices).

* `numpy.linalg.vector_norm` - Computes the vector norm of a vector (or batch of vectors).

* `numpy.vecdot` - Computes the (vector) dot product of two arrays.

* `numpy.linalg.vecdot` - An alias for `numpy.vecdot`.

* `numpy.matrix_transpose` - Transposes a matrix (or a stack of matrices).

* `numpy.linalg.matrix_transpose` - An alias for `numpy.matrix_transpose`.

(`gh-25155 <https://github.com/numpy/numpy/pull/25155>`__)

``correction`` argument for `numpy.var` and `numpy.std`
-------------------------------------------------------

``correction`` argument was added to `numpy.var` and `numpy.std`,
which is an Array API compatible alias for ``ddof``.
As both arguments serve the same purpose only one of them can be
provided at the same time.

(`gh-25169 <https://github.com/numpy/numpy/pull/25169>`__)

``ndarray.device`` and ``ndarray.to_device``
--------------------------------------------

``ndarray.device`` attribute and ``ndarray.to_device`` method were
added to `numpy.ndarray` class for Array API compatibility.

Additionally, ``device`` keyword-only arguments were added to:
`numpy.asarray`, `numpy.arange`, `numpy.empty`, `numpy.empty_like`,
`numpy.eye`, `numpy.full`, `numpy.full_like`, `numpy.linspace`,
`numpy.ones`, `numpy.ones_like`, `numpy.zeros`, and `numpy.zeros_like`.

For all these new arguments, only ``device="cpu"`` is supported.

(`gh-25233 <https://github.com/numpy/numpy/pull/25233>`__)

StringDType has been added to NumPy
-----------------------------------

We have added a new variable-width UTF-8 encoded string data type, implementing
a "NumPy array of python strings", including support for a user-provided missing
data sentinel. It is intended as a drop-in replacement for arrays of python
strings and missing data sentinels using the object dtype. See `NEP 55
<https://numpy.org/neps/nep-0055-string_dtype.html>`_ and :ref:`the
documentation <stringdtype>` for more details.

(`gh-25347 <https://github.com/numpy/numpy/pull/25347>`__)

`numpy.linalg.cholesky` and `numpy.linalg.pinv` new parameters
--------------------------------------------------------------

The ``upper`` and ``rtol`` keyword parameters were added to
`numpy.linalg.cholesky` and `numpy.lingalg.pinv`, respectively, to
improve array API compatibility.

For `numpy.linalg.pinv` if neither ``rcond`` nor ``rtol`` is specified,
the ``rcond``'s default is used. It's planned to deprecate and remove
``rcond`` in the future.

(`gh-25388 <https://github.com/numpy/numpy/pull/25388>`__)

`numpy.linalg.martrix_rank`, `numpy.sort` and `numpy.argsort` new parameters
----------------------------------------------------------------------------

New keyword parameters were added to improve array API compatibility:

* ``rtol`` keyword parameter was added to `numpy.linalg.martrix_rank`.

* ``stable`` keyword parameter was added to `numpy.sort` and `numpy.argsort`.

(`gh-25437 <https://github.com/numpy/numpy/pull/25437>`__)

``np.strings`` namespace for string ufuncs
------------------------------------------

Numpy now implements some string operations as ufuncs. The old ``np.char``
namespace is still available, and where possible the string manipulation
functions in that namespace have been updated to use the new ufuncs,
substantially improving their performance.

Where possible, we suggest updating code to use functions in ``np.strings``
instead of ``np.char``. In the future we may deprecate ``np.char`` in favor of
``np.strings``.

(`gh-25463 <https://github.com/numpy/numpy/pull/25463>`__)

`numpy.fft` support for different precisions and in-place calculations
----------------------------------------------------------------------

The various FFT routines in `numpy.fft` now do their calculations natively in
float, double, or long double precision, depending on the input precision,
instead of always calculating in double precision. Hence, the calculation will
now be less precise for single and more precise for long double precision.
The data type of the output array will now be adjusted accordingly.

Furthermore, all FFT routines have gained an ``out`` argument that can be used
for in-place calculations.

(`gh-25536 <https://github.com/numpy/numpy/pull/25536>`__)

configtool and pkg-config support
---------------------------------

A new ``numpy-config`` CLI script is available that can be queried for the
NumPy version and for compile flags needed to use the NumPy C API. This will
allow build systems to better support the use of NumPy as a dependency.
Also, a ``numpy.pc`` pkg-config file is now included with Numpy. In order to
find its location for use with ``PKG_CONFIG_PATH``, use
``numpy-config --pkgconfigdir``.

(`gh-25730 <https://github.com/numpy/numpy/pull/25730>`__)


Improvements
============

* Strings are now supported by ``any``, ``all``, and the logical ufuncs.

  (`gh-25651 <https://github.com/numpy/numpy/pull/25651>`__)

AArch64 quicksort speed improved by using Highway's VQSort
----------------------------------------------------------

The first introduction of the Google Highway library, using VQSort on AArch64. 
Execution time is improved by up to 16x in some cases, see the PR for benchmark
results. Extensions to other platforms will be done in the future.

(`gh-24018 <https://github.com/numpy/numpy/pull/24018>`__)

``iso_c_binding`` support for ``f2py``
--------------------------------------
Previously, users would have to define their own custom ``f2cmap`` file to use
type mappings defined by the Fortran2003 ``iso_c_binding`` intrinsic module.
These type maps are now natively supported by ``f2py``

(`gh-24555 <https://github.com/numpy/numpy/pull/24555>`__)

Call ``str`` automatically on third argument to functions like `assert_equal`
-----------------------------------------------------------------------------

The third argument to functions like `assert_equal` now has ``str`` called on
it automatically. This way it mimics the built-in ``assert`` statement, where
``assert_equal(a, b, obj)`` works like ``assert a == b, obj``.

(`gh-24877 <https://github.com/numpy/numpy/pull/24877>`__)

Support for array ``atol`` and ``rtol`` in ``np.isclose`` and ``np.allclose``
-----------------------------------------------------------------------------
The keywords ``atol`` and ``rtol`` in ``np.isclose`` and ``np.allclose``
now accept both scalars and arrays. An array, if given, must broadcast
to the shapes of the arguments `a` and `b`.

(`gh-24878 <https://github.com/numpy/numpy/pull/24878>`__)

Consistent failure messages in `numpy.testing`
----------------------------------------------

Previously, some `numpy.testing` assertions printed messages that
referred to the actual and desired results as ``x`` and ``y``.
Now, these values are consistently referred to as ``ACTUAL`` and
``DESIRED``.

(`gh-24931 <https://github.com/numpy/numpy/pull/24931>`__)

``f2py`` now handles ``common`` blocks which have ``kind`` specifications from modules. This further expands the usability of intrinsics like ``iso_fortran_env`` and ``iso_c_binding``.

(`gh-25186 <https://github.com/numpy/numpy/pull/25186>`__)

`numpy.fft` n-D transforms allow ``s[i] == -1``
-----------------------------------------------

`numpy.fft.fftn`, `numpy.fft.ifftn`, `numpy.fft.rfftn`, `numpy.fft.irfftn`,
`numpy.fft.fft2`, `numpy.fft.ifft2`, `numpy.fft.rfft2` and `numpy.fft.irfft2`
now use the whole input array along the axis ``i`` if ``s[i] == -1``,
in line with the array API specification.

(`gh-25495 <https://github.com/numpy/numpy/pull/25495>`__)

Guard PyArrayScalar_VAL and PyUnicodeScalarObject for the limited API
---------------------------------------------------------------------

``PyUnicodeScalarObject`` holds a ``PyUnicodeObject``, which is not available
when using ``Py_LIMITED_API``. Add guards to hide it and consequently also make
the ``PyArrayScalar_VAL`` macro hidden.

(`gh-25531 <https://github.com/numpy/numpy/pull/25531>`__)


Changes
=======

* ``np.lib.array_utils`` public module has been introduced and in its initial version
  it hosts three functions: ``byte_bounds`` (moved from ``np.lib.utils``),
  ``normalize_axis_tuple`` and ``normalize_axis_index``

  (`gh-24540 <https://github.com/numpy/numpy/pull/24540>`__)

* Redefine `numpy.bool` as an alias for `numpy.bool_` (as opposed to the `bool`
  it was until NumPy 1.24) for Array API compatibility.

  (`gh-25080 <https://github.com/numpy/numpy/pull/25080>`__)

Remove datetime64 deprecation warning when constructing with timezone
---------------------------------------------------------------------
The ``np.datetime64`` method now issues a User Warning rather than a
Deprecation Warning whenever a timezone is included in the datetime
string that is provided.

(`gh-24193 <https://github.com/numpy/numpy/pull/24193>`__)

Default integer now 64bit on 64bit windows
------------------------------------------
The default NumPy integer is now 64bit on all 64bit systems as the
historic 32bit default on windows was a common source of issues.
Most users should not notice this, the main issues may occur
with code interfacing with libraries written in a compiled language
like C.  For more information see :ref:`migration_windows_int64`.

(`gh-24224 <https://github.com/numpy/numpy/pull/24224>`__)

Renamed ``numpy.core`` to ``numpy._core``
-----------------------------------------
Accessing ``numpy.core`` now emits a DeprecationWarning. In practice
we have found that most downstream usage of ``numpy.core`` was to access
functionality that is available in the main ``numpy`` namespace.
If for some reason you are using functionality in ``numpy.core`` that
is not available in the main ``numpy`` namespace, this means you are likely
using private NumPy internals. You can still access these internals via
``numpy._core`` without a deprecation warning but we do not provide any
backward compatibility guarantees for NumPy internals. Please open an issue
if you think a mistake was made and something needs to be made public.

(`gh-24634 <https://github.com/numpy/numpy/pull/24634>`__)

The "relaxed strides" debug build option, which was previously enabled through
the ``NPY_RELAXED_STRIDES_DEBUG`` environment variable or the
``-Drelaxed-strides-debug`` config-settings flag, has been removed.

(`gh-24717 <https://github.com/numpy/numpy/pull/24717>`__)

Redefinition of ``np.intp``/``np.uintp`` (almost never a change)
----------------------------------------------------------------
Due to the actual use of these types almost always matching the use of
``size_t``/``Py_ssize_t`` this is now the definition in C.
Previously, it matched ``intptr_t`` and ``uintptr_t`` which would often
have been subtly incorrect.
This has no effect on the vast majority of machines since the size
of these types only differ on extremely niche platforms.

However, it means that:

* Pointers may not necessarily fit into an ``intp`` typed array anymore.
  The ``p`` and ``P`` character codes can still be used, however.
* Creating ``intptr_t`` or ``uintptr_t`` typed arrays in C remains possible
  in a cross-platform way via ``PyArray_DescrFromType('p')``.
* The new character codes ``nN`` were introduced.
* It is now correct to use the Python C-API functions when parsing
  to ``npy_intp`` typed arguments.

(`gh-24888 <https://github.com/numpy/numpy/pull/24888>`__)

``numpy.fft.helper`` made private
---------------------------------

``numpy.fft.helper`` was renamed to `numpy.fft._helper` to indicate
that it is a private submodule. All public functions exported by it
should be accessed from `numpy.fft`.

(`gh-24945 <https://github.com/numpy/numpy/pull/24945>`__)

``numpy.linalg.linalg`` made private
------------------------------------

``numpy.linalg.linalg`` was renamed to `numpy.linalg._linalg`
to indicate that it is a private submodule. All public functions
exported by it should be accessed from `numpy.linalg`.

(`gh-24946 <https://github.com/numpy/numpy/pull/24946>`__)

Out-of-bound axis not the same as ``axis=None``
-----------------------------------------------
In some cases ``axis=32`` or for concatenate any large value
was the same as ``axis=None``.
Except for ``concatenate`` this was deprecate.
Any out of bound axis value will now error, make sure to use
``axis=None``.

(`gh-25149 <https://github.com/numpy/numpy/pull/25149>`__)

Cleanup of initialization of ``numpy.dtype`` with strings with commas
---------------------------------------------------------------------
The interpretation of strings with commas is changed slightly, in that a
trailing comma will now always create a structured dtype.  E.g., where
previously ``np.dtype("i")`` and ``np.dtype("i,")`` were treated as identical,
now ``np.dtype("i,")`` will create a structured dtype, with a single
field. This is analogous to ``np.dtype("i,i")`` creating a structured dtype
with two fields, and makes the behaviour consistent with that expected of
tuples.

At the same time, the use of single number surrounded by parenthesis to
indicate a sub-array shape, like in ``np.dtype("(2)i,")``, is deprecated.
Instead; one should use ``np.dtype("(2,)i")`` or ``np.dtype("2i")``.
Eventually, using a number in parentheses will raise an exception, like is the
case for initializations without a comma, like ``np.dtype("(2)i")``.

(`gh-25434 <https://github.com/numpy/numpy/pull/25434>`__)

Change in how complex sign is calculated
----------------------------------------
Following the API Array standard, the complex sign is now calculated as
``z / |z|`` (instead of the rather less logical case where the sign of
the real part was taken, unless the real part was zero, in which case
the sign of the imaginary part was returned).  Like for real numbers,
zero is returned if ``z==0``.

(`gh-25441 <https://github.com/numpy/numpy/pull/25441>`__)

Functions that returned a list of ndarrays have been changed to return a tuple
of ndarrays instead. Returning tuples consistently whenever a sequence of
arrays is returned makes it easier for JIT compilers like Numba, as well as for
static type checkers in some cases, to support these functions. Changed
functions are: ``atleast_1d``, ``atleast_2d``, ``atleast_3d``, ``broadcast_arrays``,
``meshgrid``, ``ogrid``, ``histogramdd``.

(`gh-25570 <https://github.com/numpy/numpy/pull/25570>`__)

``any`` and ``all`` return booleans for object arrays
-----------------------------------------------------
The ``any`` and ``all`` functions and methods now return
booleans also for object arrays.  Previously, they did
a reduction which behaved like the Python ``or`` and
``and`` operators which evaluates to one of the arguments.
You can use ``np.logical_or.reduce`` and ``np.logical_and.reduce``
to achieve the previous behavior.

(`gh-25712 <https://github.com/numpy/numpy/pull/25712>`__)
